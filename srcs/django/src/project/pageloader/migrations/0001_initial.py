# Generated by Django 4.2.16 on 2024-11-16 14:21

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import pageloader.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('mode', models.CharField(max_length=100)),
                ('rules', models.CharField(default='Time', max_length=100)),
                ('limit', models.IntegerField(blank=True, default=0, null=True)),
                ('balls', models.IntegerField(blank=True, default=1, null=True)),
                ('boost', models.BooleanField(default=True)),
                ('player_limit', models.IntegerField(blank=True, default=0, null=True)),
                ('player_inlobby', models.IntegerField(blank=True, default=0, null=True)),
                ('player1_status', models.CharField(default='not_ready', max_length=100)),
                ('player2_status', models.CharField(default='not_ready', max_length=100)),
                ('player3_status', models.CharField(default='not_ready', max_length=100)),
                ('player4_status', models.CharField(default='not_ready', max_length=100)),
                ('player1_score', models.IntegerField(blank=True, default=0, null=True)),
                ('player2_score', models.IntegerField(blank=True, default=0, null=True)),
                ('player3_score', models.IntegerField(blank=True, default=0, null=True)),
                ('player4_score', models.IntegerField(blank=True, default=0, null=True)),
                ('team1_score', models.IntegerField(blank=True, default=0, null=True)),
                ('team2_score', models.IntegerField(blank=True, default=0, null=True)),
                ('status', models.CharField(default='not_started', max_length=100)),
                ('player1', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games_player1', to=settings.AUTH_USER_MODEL)),
                ('player2', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games_player2', to=settings.AUTH_USER_MODEL)),
                ('player3', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games_player3', to=settings.AUTH_USER_MODEL)),
                ('player4', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games_player4', to=settings.AUTH_USER_MODEL)),
                ('players', models.ManyToManyField(related_name='game_players', to=settings.AUTH_USER_MODEL)),
                ('ready_players', models.ManyToManyField(blank=True, related_name='game_ready_players', to=settings.AUTH_USER_MODEL)),
                ('team1', models.ManyToManyField(related_name='games_team1', to=settings.AUTH_USER_MODEL)),
                ('team2', models.ManyToManyField(related_name='games_team2', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PendingRequest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('request_type', models.CharField(choices=[('friend', 'Friend'), ('game', 'Game'), ('tournament', 'Tournament')], max_length=10)),
                ('request', models.CharField(max_length=10)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined')], default='pending', max_length=10)),
                ('requesting_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to=settings.AUTH_USER_MODEL)),
                ('target_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('mode', models.CharField(max_length=100)),
                ('rules', models.CharField(default='Time', max_length=100)),
                ('limit', models.IntegerField(blank=True, default=0, null=True)),
                ('balls', models.IntegerField(blank=True, default=1, null=True)),
                ('boost', models.BooleanField(default=True)),
                ('nb_players', models.IntegerField(blank=True, default=0, null=True)),
                ('players_in_lobby', models.IntegerField(blank=True, default=0, null=True)),
                ('status', models.CharField(default='not_started', max_length=100)),
                ('rounds', models.IntegerField(default=0)),
                ('owner', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owned_tournaments', to=settings.AUTH_USER_MODEL)),
                ('players', models.ManyToManyField(related_name='tournament_players', to=settings.AUTH_USER_MODEL)),
                ('winner', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tournament_winner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=100)),
                ('game_win', models.IntegerField(default=0)),
                ('game_lose', models.IntegerField(default=0)),
                ('game_draw', models.IntegerField(default=0)),
                ('game_abandon', models.IntegerField(default=0)),
                ('tournament_win', models.IntegerField(default=0)),
                ('tournament_lose', models.IntegerField(default=0)),
                ('tournament_draw', models.IntegerField(default=0)),
                ('tournament_abandon', models.IntegerField(default=0)),
                ('img_profile', models.ImageField(default='profiles/default.png', upload_to=pageloader.models.user_directory_path)),
                ('p1Right', models.CharField(default='ArrowRight', max_length=20)),
                ('p1Left', models.CharField(default='ArrowLeft', max_length=20)),
                ('p1Shoot', models.CharField(default='Control', max_length=20)),
                ('p1Boost', models.CharField(default='Space', max_length=20)),
                ('p2Right', models.CharField(default='', max_length=20)),
                ('p2Left', models.CharField(default='', max_length=20)),
                ('p2Shoot', models.CharField(default='', max_length=20)),
                ('p2Boost', models.CharField(default='', max_length=20)),
                ('p3Right', models.CharField(default='', max_length=20)),
                ('p3Left', models.CharField(default='', max_length=20)),
                ('p3Shoot', models.CharField(default='', max_length=20)),
                ('p3Boost', models.CharField(default='', max_length=20)),
                ('p4Right', models.CharField(default='', max_length=20)),
                ('p4Left', models.CharField(default='', max_length=20)),
                ('p4Shoot', models.CharField(default='', max_length=20)),
                ('p4Boost', models.CharField(default='', max_length=20)),
                ('blocked_users', models.ManyToManyField(blank=True, related_name='blocked_by', to='pageloader.userprofile')),
                ('game_played', models.ManyToManyField(blank=True, related_name='user_profiles', to='pageloader.game')),
                ('in_game_lobby', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lobby_players', to='pageloader.game')),
                ('in_tournament_lobby', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lobby_players', to='pageloader.tournament')),
                ('pending_requests', models.ManyToManyField(blank=True, related_name='user_profiles', to='pageloader.pendingrequest')),
                ('tournament_played', models.ManyToManyField(blank=True, related_name='user_profiles', to='pageloader.tournament')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user_friend_list', models.ManyToManyField(blank=True, to='pageloader.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.IntegerField(default=1)),
                ('status', models.CharField(default='not_started', max_length=100)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('slots', models.JSONField(default=dict)),
                ('ready_status', models.JSONField(default=dict)),
                ('games', models.ManyToManyField(related_name='round_games', to='pageloader.game')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_rounds', to='pageloader.tournament')),
            ],
        ),
        migrations.AddField(
            model_name='game',
            name='tournament',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pageloader.tournament'),
        ),
        migrations.AddField(
            model_name='game',
            name='winner',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games_winner', to=settings.AUTH_USER_MODEL),
        ),
    ]
